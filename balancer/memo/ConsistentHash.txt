一、hash环
    IPv4的地址是4组8位2进制数组成，所以用2^32可以保证每个IP地址会有唯一的映射；
    我们可以将这2^32个值抽象成一个圆环⭕️，圆环的正上方的点代表0，顺时针排列，以此类推：1、2、3…直到2^32-1，而这个由2的32次方个点组成的圆环统称为hash环；

二、服务器映射到hash环
    在对服务器进行映射时，使用hash（服务器ip）% 2^32，即：
    使用服务器IP地址进行hash计算，用哈希后的结果对2^32取模，结果一定是一个0到2^32-1之间的整数；
    而这个整数映射在hash环上的位置代表了一个服务器，依次将node0、node1、node2三个缓存服务器映射到hash环上；

三、对象key映射到服务器
    从缓存对象key的位置开始，沿顺时针方向遇到的第一个服务器，便是当前对象将要缓存到的服务器；

四、服务器扩缩容场景
    服务器减少时，被去掉的服务器上对象key 在hash环中顺时针转移到下一个服务器节点
    服务器增加时，新增服务器节点的前后节点，对象key重新分配

五、数据偏斜&服务器性能平衡问题
    实际场景中经常出现hash环上的服务器节点不均匀，导致大部分数据key集中到某一个服务器节点上。引入虚拟节点来解决负载不均衡的问题：
    即将每台物理服务器虚拟为一组虚拟服务器，将虚拟服务器放置到哈希环上，如果要确定对象的服务器，需先确定对象的虚拟服务器，再由虚拟服务器确定物理服务器；

六、虚拟节点的计算
    虚拟节点的hash计算通常可以采用：对应节点的IP地址加数字编号后缀 hash（10.24.23.227#1) 的方式；举个例子，node-1节点IP为10.24.23.227，正常计算node-1的hash值：
    hash（10.24.23.227#1）% 2^32
    假设我们给node-1设置三个虚拟节点，node-1#1、node-1#2、node-1#3，对它们进行hash后取模：
    hash（10.24.23.227#1）% 2^32
    hash（10.24.23.227#2）% 2^32
    hash（10.24.23.227#3）% 2^32